generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String? // For credential auth
  image         String? // Profile image
  role          UserRole  @default(CLIENT)
  language      String    @default("en")
  phone         String?
  blocked       Boolean   @default(false)
  emailVerified DateTime?
  lastActive    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  cases           Case[]                 @relation("ClientCases")
  attorneyCases   Case[]                 @relation("AttorneyCases")
  conversations   Conversation[]
  appointments    Appointment[]
  tasks           Task[]                 @relation("AssignedTasks")
  createdTasks    Task[]                 @relation("CreatedTasks")
  accounts        Account[]
  sessions        Session[]
  activities      UserActivity[]
  leads           Lead[]
  notifications   Notification[]
  supportTickets  SupportTicket[]
  assignedTickets SupportTicket[]        @relation("AssignedTickets")
  ticketMessages  SupportTicketMessage[]
  invoices        Invoice[]
  paymentSources  PaymentSource[]
}

model Call {
  id             String        @id @default(cuid())
  externalCallId String        @unique
  agentId        String
  fromNumber     String
  toNumber       String
  direction      CallDirection
  status         CallStatus
  startedAt      DateTime
  answeredAt     DateTime?
  endedAt        DateTime?
  duration       Int?
  recordingUrl   String?
  transcript     String?       @db.Text
  metadata       Json          @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  analysis CallAnalysis?
  tasks    Task[]
  mapping  CallMapping?
}

model CallAnalysis {
  id            String   @id @default(cuid())
  callId        String   @unique
  call          Call     @relation(fields: [callId], references: [externalCallId])
  summary       String?  @db.Text
  sentiment     String?
  actionItems   String[]
  extractedInfo Json     @default("{}")
  createdAt     DateTime @default(now())
}

model CallMapping {
  id            String   @id @default(cuid())
  nextivaCallId String   @unique
  retellCallId  String   @unique
  call          Call?    @relation(fields: [retellCallId], references: [externalCallId])
  createdAt     DateTime @default(now())
}

model Conversation {
  id        String              @id @default(cuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  channel   ConversationChannel
  status    ConversationStatus
  language  String              @default("en")
  startedAt DateTime            @default(now())
  endedAt   DateTime?
  metadata  Json                @default("{}")

  messages Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           MessageRole
  content        String       @db.Text
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
}

model Case {
  id           String       @id @default(cuid())
  caseNumber   String       @unique
  clientId     String
  client       User         @relation("ClientCases", fields: [clientId], references: [id])
  attorneyId   String?
  attorney     User?        @relation("AttorneyCases", fields: [attorneyId], references: [id])
  practiceArea PracticeArea
  status       CaseStatus
  description  String?      @db.Text
  metadata     Json         @default("{}")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  documents    Document[]
  appointments Appointment[]
  tasks        Task[]
  payments     Payment[]
  paymentPlans PaymentPlan[]
  trustLedger  TrustLedger[]
  invoices     Invoice[]
}

model Document {
  id         String   @id @default(cuid())
  caseId     String
  case       Case     @relation(fields: [caseId], references: [id])
  name       String
  type       String
  url        String
  size       Int
  uploadedBy String
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
}

model Appointment {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  caseId      String?
  case        Case?             @relation(fields: [caseId], references: [id])
  type        AppointmentType
  status      AppointmentStatus
  scheduledAt DateTime
  duration    Int // in minutes
  location    String?
  meetingUrl  String?
  notes       String?           @db.Text
  metadata    Json              @default("{}")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  type          TaskType
  priority      TaskPriority
  status        TaskStatus
  dueDate       DateTime?
  assignedToId  String?
  assignedTo    User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User         @relation("CreatedTasks", fields: [createdById], references: [id])
  caseId        String?
  case          Case?        @relation(fields: [caseId], references: [id])
  relatedCallId String?
  call          Call?        @relation(fields: [relatedCallId], references: [externalCallId])
  metadata      Json         @default("{}")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// SEO and Content Models
model BlogPost {
  id              String    @id @default(cuid())
  title           String
  titleEs         String?   // Spanish title
  slug            String    @unique
  content         String    @db.Text
  contentEs       String?   @db.Text // Spanish content
  excerpt         String?
  excerptEs       String?   // Spanish excerpt
  metaDescription String
  metaKeywords    String[]
  featuredImage   String?
  images          String[]
  practiceArea    String?   // Made optional for news posts
  category        String    @default("general") // immigration, workers-comp, personal-injury, etc.
  language        String    @default("en")
  status          String    @default("draft") // draft, published, archived
  publishedAt     DateTime?
  author          String?
  tags            String[]  // For news categorization
  keywords        String[]
  faqSection      Json?
  seoScore        Int       @default(0)
  viewCount       Int       @default(0)
  readTime        Int       @default(0) // in minutes
  
  // News monitoring fields
  sourceUrl       String?   // Original news source URL
  sourceName      String?   // News source name (USCIS, Congress, etc.)
  metadata        Json      @default("{}") // Flexible metadata for news items
  seo             Json?     // SEO metadata
  
  // Translation relationship
  originalId   String?
  original     BlogPost?  @relation("BlogTranslation", fields: [originalId], references: [id])
  translations BlogPost[] @relation("BlogTranslation")

  // SEO tracking
  seoAnalysis SeoAnalysis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([practiceArea, language])
  @@index([status, publishedAt])
  @@index([category])
  @@index([sourceUrl])
  @@index([sourceName])
}

model ScrapedContent {
  id             String   @id @default(cuid())
  platform       String // youtube, tiktok, instagram, facebook
  url            String   @unique
  title          String
  description    String   @db.Text
  engagement     Json // { views, likes, comments, shares }
  publishedAt    DateTime
  author         String
  hashtags       String[]
  practiceArea   String?
  relevanceScore Float

  // Content response tracking
  responseCreated Boolean @default(false)
  responseId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform, relevanceScore])
  @@index([practiceArea])
  @@index([publishedAt])
}

model Competitor {
  id               String   @id @default(cuid())
  name             String
  website          String   @unique
  domain           String
  isActive         Boolean  @default(true)
  lastChecked      DateTime?
  checkFrequency   String   @default("weekly") // daily, weekly, monthly
  practiceAreas    String[]
  locations        String[]
  monitoringConfig Json     @default("{}")
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  analyses CompetitorAnalysis[]

  @@index([domain])
  @@index([isActive])
}

model CompetitorAnalysis {
  id           String   @id @default(cuid())
  competitorId String
  competitor   Competitor @relation(fields: [competitorId], references: [id])
  url          String
  domain       String
  blogPosts    Json // Array of scraped blog posts
  seoData      Json // Meta tags, schema, etc.
  backlinks    Json? // Backlink profile
  keywords     Json? // Ranking keywords
  contentGaps  Json? // Identified content opportunities

  analyzedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([competitorId])
  @@index([domain])
  @@index([analyzedAt])
}

model KeywordResearch {
  id           String @id @default(cuid())
  keyword      String
  practiceArea String
  language     String
  searchVolume Int
  difficulty   Int // 0-100
  cpc          Float? // Cost per click
  intent       String // informational, transactional, navigational
  serp         Json? // SERP analysis data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([keyword, language])
  @@index([practiceArea, language])
  @@index([searchVolume])
  @@index([difficulty])
}

model SeoAnalysis {
  id         String   @id @default(cuid())
  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])

  // Core Web Vitals
  lcp Float? // Largest Contentful Paint
  fid Float? // First Input Delay
  cls Float? // Cumulative Layout Shift

  // SEO Metrics
  organicTraffic Int    @default(0)
  avgPosition    Float? // Average SERP position
  impressions    Int    @default(0)
  ctr            Float? // Click-through rate
  backlinks      Int    @default(0)

  // Content metrics
  bounceRate    Float?
  avgTimeOnPage Float? // in seconds

  analyzedAt DateTime @default(now())

  @@index([blogPostId])
  @@index([analyzedAt])
}

model NewsAlert {
  id             String @id @default(cuid())
  source         String // Google News, legal news sites, etc.
  title          String
  url            String
  summary        String @db.Text
  practiceArea   String
  relevanceScore Float

  // Response tracking
  contentCreated Boolean @default(false)
  blogPostId     String?

  publishedAt DateTime
  createdAt   DateTime @default(now())

  @@index([practiceArea, relevanceScore])
  @@index([publishedAt])
}


// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // SIGN_IN, SIGN_OUT, PAGE_VIEW, etc.
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([type])
}

// Contact Management
model Contact {
  id            String    @id @default(cuid())
  email         String?
  phone         String?   @unique
  name          String?
  source        String? // website, gohighlevel, retell, etc.
  smsOptIn      Boolean   @default(false)
  smsOptInDate  DateTime?
  smsOptOut     Boolean   @default(false)
  smsOptOutDate DateTime?
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  smsLogs  SmsLog[]
  callLogs CallLog[]
  leads    Lead[]

  @@index([email])
  @@index([phone])
  @@index([smsOptIn, smsOptOut])
}

// SMS Logging for GHL Integration
model SmsLog {
  id            String       @id @default(cuid())
  ghlContactId  String?
  ghlMessageId  String?      @unique
  contactId     String?
  contact       Contact?     @relation(fields: [contactId], references: [id])
  to            String
  from          String
  toNumber      String? // Alias for compatibility
  fromNumber    String? // Alias for compatibility
  body          String?      @db.Text
  message       String?      @db.Text // Alias for compatibility
  status        SmsStatus
  direction     SmsDirection
  triggerType   String? // post-call, appointment-reminder, follow-up, custom
  relatedCallId String? // Link to VoiceCall if SMS was triggered by call
  templateId    String?
  errorMessage  String?
  sentAt        DateTime?
  deliveredAt   DateTime?
  mediaUrl      String? // For MMS attachments
  metadata      Json         @default("{}")
  createdAt     DateTime     @default(now())

  @@index([ghlContactId])
  @@index([ghlMessageId])
  @@index([contactId])
  @@index([relatedCallId])
  @@index([direction, status])
  @@index([createdAt])
}

// Phone Number Management
model PhoneNumber {
  id           String        @id @default(cuid())
  number       String        @unique
  provider     PhoneProvider
  type         PhoneType
  capabilities String[] // e.g., ['voice', 'sms', 'mms']
  active       Boolean       @default(true)
  agentId      String? // For voice agent assignment
  metadata     Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([provider, active])
  @@index([agentId])
}

// Call Logging
model CallLog {
  id           String        @id @default(cuid())
  contactId    String?
  contact      Contact?      @relation(fields: [contactId], references: [id])
  fromNumber   String
  toNumber     String
  direction    CallDirection
  status       CallStatus
  duration     Int? // in seconds
  recordingUrl String?
  externalId   String?       @unique // External ID from voice provider (Retell)
  errorMessage String?
  metadata     Json          @default("{}")
  startedAt    DateTime
  endedAt      DateTime?
  createdAt    DateTime      @default(now())

  @@index([contactId])
  @@index([externalId])
  @@index([createdAt])
}

// Voice Call Integration (Retell + GHL)
model VoiceCall {
  id                   String          @id @default(cuid())
  retellCallId         String          @unique
  ghlContactId         String?
  ghlCampaignId        String?
  phoneNumber          String
  agentId              String
  direction            CallDirection
  status               VoiceCallStatus
  practiceArea         String?
  language             String          @default("en")
  duration             Int? // in seconds
  recordingUrl         String?
  transcript           String?         @db.Text
  summary              String?         @db.Text
  sentiment            String? // positive, neutral, negative
  outcome              String? // connected, voicemail, no_answer, busy, failed
  appointmentScheduled Boolean         @default(false)
  error                String? // Error message if call failed
  metadata             Json            @default("{}")
  startedAt            DateTime        @default(now())
  connectedAt          DateTime?
  endedAt              DateTime?
  lastStatusUpdate     DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relations
  recording CallRecording?

  @@index([retellCallId])
  @@index([ghlContactId])
  @@index([status])
  @@index([createdAt])
}

// Lead Management
model Lead {
  id           String        @id @default(cuid())
  contactId    String?
  contact      Contact?      @relation(fields: [contactId], references: [id])
  source       String // website, referral, advertising, etc.
  practiceArea PracticeArea?
  status       LeadStatus
  score        Int           @default(0) // 0-100
  urgency      LeadUrgency

  // Lead details
  description    String? @db.Text
  estimatedValue Float?

  // Assignment
  assignedToId String?
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  assignedAt   DateTime?

  // Tracking
  firstContactAt DateTime?
  lastContactAt  DateTime?
  convertedAt    DateTime?
  lostReason     String?

  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contactId])
  @@index([status, score])
  @@index([assignedToId])
  @@index([createdAt])
}

// Analytics Snapshot
model AnalyticsSnapshot {
  id   String   @id @default(cuid())
  date DateTime // Date of the snapshot

  // Lead metrics
  totalLeads     Int   @default(0)
  newLeads       Int   @default(0)
  convertedLeads Int   @default(0)
  lostLeads      Int   @default(0)
  avgLeadScore   Float @default(0)

  // Communication metrics
  totalCalls  Int @default(0)
  totalSms    Int @default(0)
  totalEmails Int @default(0)

  // Appointment metrics
  totalAppointments     Int @default(0)
  completedAppointments Int @default(0)
  noShowAppointments    Int @default(0)

  // Performance metrics by practice area
  practiceAreaMetrics Json @default("{}")

  // Source analytics
  sourceMetrics Json @default("{}")

  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@unique([date])
  @@index([date])
}

// Cron Job Logging
model CronJobLog {
  id        String        @id @default(cuid())
  jobName   String
  status    CronJobStatus
  startedAt DateTime
  endedAt   DateTime?
  duration  Int? // in milliseconds
  error     String?       @db.Text
  result    Json?
  metadata  Json          @default("{}")
  createdAt DateTime      @default(now())

  @@index([jobName, status])
  @@index([createdAt])
}

// Notification Management
model Notification {
  id String @id @default(cuid())

  // Recipient
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Notification details
  type     NotificationType
  title    String
  message  String               @db.Text
  priority NotificationPriority @default(MEDIUM)

  // Status tracking
  read   Boolean   @default(false)
  readAt DateTime?

  // Action data (e.g., link to resource)
  actionUrl  String?
  actionData Json    @default("{}")

  // Metadata
  metadata Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, read])
  @@index([type])
  @@index([createdAt])
}

// Support Ticket System
model SupportTicket {
  id String @id @default(cuid())

  // Ticket details
  ticketNumber String @unique @default(cuid())
  subject      String
  description  String @db.Text

  // User association
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Categorization
  category TicketCategory
  priority TicketPriority
  status   TicketStatus   @default(OPEN)

  // Assignment
  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])

  // Resolution tracking
  resolvedAt         DateTime?
  resolutionNotes    String?   @db.Text
  satisfactionRating Int? // 1-5 rating

  // Related entities
  caseId        String?
  appointmentId String?

  // Communication thread
  messages SupportTicketMessage[]

  // Metadata
  metadata Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status, priority])
  @@index([assignedToId])
  @@index([createdAt])
}

model SupportTicketMessage {
  id String @id @default(cuid())

  // Message details
  ticketId String
  ticket   SupportTicket @relation(fields: [ticketId], references: [id])

  // Sender
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Content
  message    String  @db.Text
  isInternal Boolean @default(false) // Internal notes not visible to client

  // Attachments
  attachments Json @default("[]") // Array of {name, url, size, type}

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
  @@index([authorId])
}

// Security Models
model SecurityIncident {
  id          String   @id @default(cuid())
  type        String
  severity    String   // low, medium, high, critical
  description String   @db.Text
  source      String?
  ipAddress   String?
  userId      String?
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
}

model SecurityThreat {
  id             String   @id @default(cuid())
  type           String
  source         String
  threat         String
  severity       String   // low, medium, high, critical
  status         String   // active, mitigated, resolved
  details        String   @db.Text
  mitigationTaken String?  @db.Text
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
}

// Enums
enum UserRole {
  CLIENT
  ATTORNEY
  PARALEGAL
  ADMIN
}

enum CallDirection {
  inbound
  outbound
}

enum CallStatus {
  active
  completed
  failed
  missed
}

enum VoiceCallStatus {
  initiated
  ringing
  answered
  completed
  failed
  no_answer
  busy
  voicemail
}

enum ConversationChannel {
  chat
  voice
  email
}

enum ConversationStatus {
  active
  closed
  pending
}

enum MessageRole {
  user
  assistant
  system
}

enum PracticeArea {
  immigration
  personal_injury
  workers_compensation
  criminal_defense
  family_law
  traffic
}

enum CaseStatus {
  open
  in_progress
  pending
  closed
  archived
}

enum AppointmentType {
  consultation
  follow_up
  court
  document_review
  other
}

enum AppointmentStatus {
  scheduled
  confirmed
  cancelled
  completed
  no_show
}

enum TaskType {
  follow_up
  callback
  document_preparation
  court_filing
  client_communication
  voicemail
  security_alert
  system_error
  billing_issue
  other
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

enum SmsDirection {
  inbound
  outbound
}

enum SmsStatus {
  queued
  sending
  sent
  failed
  delivered
  undelivered
  receiving
  received
}

enum LeadStatus {
  new
  contacted
  qualified
  proposal
  negotiation
  won
  lost
}

enum LeadUrgency {
  low
  medium
  high
  critical
}

enum CronJobStatus {
  started
  completed
  failed
}

// Payment Management
model Payment {
  id String @id @default(cuid())

  // Transaction details
  amount      Float
  currency    String @default("USD")
  description String

  // Gateway information
  gateway              PaymentGateway
  gatewayTransactionId String?
  gatewayChargeId      String?
  gatewayReference     String?
  authCode             String?

  // Account information
  accountType AccountType @default(OPERATING)

  // Client information
  clientEmail String
  clientName  String
  clientPhone String?

  // Case association
  caseId String?
  case   Case?   @relation(fields: [caseId], references: [id])
  
  // Invoice association
  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  // Status
  status        PaymentStatus
  failureReason String?

  // Payment method details
  paymentMethod PaymentMethod
  last4         String? // Last 4 digits of card/account

  // Timestamps
  processedAt DateTime?
  refundedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  refunds PaymentRefund[]

  // Metadata
  metadata Json @default("{}")

  @@index([clientEmail])
  @@index([caseId])
  @@index([status])
  @@index([gateway])
  @@index([createdAt])
}

model PaymentRefund {
  id        String  @id @default(cuid())
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])

  amount Float
  reason String
  status RefundStatus

  gatewayRefundId String?
  processedAt     DateTime?

  createdBy String
  metadata  Json   @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
  @@index([status])
}

model Invoice {
  id             String   @id @default(cuid())
  invoiceNumber  String   @unique
  clientId       String
  client         User     @relation(fields: [clientId], references: [id])
  caseId         String?
  case           Case?    @relation(fields: [caseId], references: [id])
  
  subtotal       Float
  tax            Float    @default(0)
  total          Float
  amountPaid     Float    @default(0)
  amountDue      Float
  
  status         InvoiceStatus
  dueDate        DateTime
  paidAt         DateTime?
  
  lineItems      Json     // Array of {description, quantity, rate, amount}
  metadata       Json     @default("{}")
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  payments       Payment[]
  
  @@index([clientId])
  @@index([caseId])
  @@index([status])
  @@index([dueDate])
}

model PaymentSource {
  id              String   @id @default(cuid())
  clientId        String
  client          User     @relation(fields: [clientId], references: [id])
  
  type            PaymentMethodType
  last4           String?
  brand           String?
  expiryMonth     Int?
  expiryYear      Int?
  
  isDefault       Boolean  @default(false)
  
  gatewayCustomerId String?
  gatewayMethodId   String?
  
  metadata        Json     @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([clientId])
  @@index([isDefault])
}

model PaymentPlan {
  id String @id @default(cuid())

  // Client information
  clientEmail String
  clientName  String

  // Case association
  caseId String?
  case   Case?   @relation(fields: [caseId], references: [id])

  // Plan details
  totalAmount   Float
  installments  Int
  monthlyAmount Float

  // Schedule
  startDate       DateTime
  nextPaymentDate DateTime?

  // Status
  status          PaymentPlanStatus
  paidAmount      Float             @default(0)
  remainingAmount Float

  // Metadata
  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientEmail])
  @@index([status])
  @@index([nextPaymentDate])
}

// Trust Account Ledger
model TrustLedger {
  id String @id @default(cuid())

  // Transaction details
  transactionType TrustTransactionType
  amount          Float
  balance         Float // Running balance after this transaction

  // Client/Case information
  clientName  String
  clientEmail String
  caseId      String?
  case        Case?   @relation(fields: [caseId], references: [id])

  // Reference information
  paymentId   String? // Reference to Payment if applicable
  reference   String // External reference number
  description String

  // Compliance
  recordedBy   String
  approvedBy   String?
  reconciled   Boolean   @default(false)
  reconciledAt DateTime?

  // Metadata
  metadata Json @default("{}")

  createdAt DateTime @default(now())

  @@index([clientEmail])
  @@index([caseId])
  @@index([transactionType])
  @@index([createdAt])
}

// Payment Enums
enum PaymentGateway {
  STRIPE
  LAWPAY
  AUTHORIZE_NET
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CARD
  ACH
  CASH
  CHECK
  WIRE
}

enum AccountType {
  TRUST
  OPERATING
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PaymentPlanStatus {
  ACTIVE
  PAUSED
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum TrustTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER_IN
  TRANSFER_OUT
  FEE
  INTEREST
  ADJUSTMENT
}

// Notification Enums
enum NotificationType {
  SYSTEM
  APPOINTMENT_REMINDER
  CASE_UPDATE
  DOCUMENT_READY
  PAYMENT_DUE
  PAYMENT_RECEIVED
  TASK_ASSIGNED
  MESSAGE_RECEIVED
  SUPPORT_TICKET_UPDATE
  GENERAL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Support Ticket Enums
enum TicketCategory {
  TECHNICAL
  BILLING
  CASE_INQUIRY
  APPOINTMENT
  DOCUMENT_REQUEST
  GENERAL_INQUIRY
  COMPLAINT
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_ON_CLIENT
  WAITING_ON_ATTORNEY
  RESOLVED
  CLOSED
  CANCELLED
}

// Phone Number Enums
enum PhoneProvider {
  RETELL
  GOHIGHLEVEL
  NEXTIVA
}

enum PhoneType {
  VOICE
  SMS
  VOICE_AND_SMS
}

// Retry Queue Enums
enum RetryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Agent Interaction Tracking
model AgentInteraction {
  id String @id @default(cuid())

  // Agent identification
  agentId   String
  agentName String
  agentType String // chat, voice, crewai, document

  // Session information
  sessionId String
  userId    String?

  // Interaction details
  intent       String
  language     String
  responseTime Int // in milliseconds
  success      Boolean
  satisfaction Float? // 1-5 rating
  escalated    Boolean @default(false)

  // Additional data
  metadata Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())

  @@index([agentId])
  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

// Security Event Logging
model SecurityEvent {
  id String @id @default(cuid())

  // Event details
  service   String // retell, ghl, etc.
  type      String // api_request_validation, rate_limit_exceeded, etc.
  riskLevel String // low, medium, high
  details   Json   @default("{}")

  // Timestamps
  timestamp DateTime @default(now())

  @@index([service])
  @@index([type])
  @@index([riskLevel])
  @@index([timestamp])
}

// Call Recording Management
model CallRecording {
  id     String @id @default(cuid())
  callId String @unique

  // Recording details
  recordingUrl String
  transcript   String @db.Text
  duration     Int // in milliseconds

  // Analysis results
  sentiment            String // positive, neutral, negative
  summary              String   @db.Text
  keywords             String[]
  actionItems          String[]
  followUpRequired     Boolean  @default(false)
  appointmentScheduled Boolean  @default(false)

  // Relations
  voiceCall VoiceCall? @relation(fields: [callId], references: [retellCallId])

  // Metadata
  metadata Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sentiment])
  @@index([followUpRequired])
  @@index([appointmentScheduled])
  @@index([createdAt])
}

// Error Logging
model ErrorLog {
  id String @id @default(cuid())

  // Error details
  service   String // retell, ghl, etc.
  errorType String
  message   String
  code      String?

  // Context
  callId      String?
  contactId   String?
  recoverable Boolean @default(false)
  retryAfter  Int? // seconds

  // Additional data
  metadata Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())

  @@index([service])
  @@index([errorType])
  @@index([callId])
  @@index([contactId])
  @@index([createdAt])
}

// Retry Queue Management
model RetryQueue {
  id String @id @default(cuid())

  // Operation details
  operation    String
  delaySeconds Int
  context      Json   @default("{}")

  // Scheduling
  scheduledFor DateTime
  attempts     Int      @default(0)
  maxAttempts  Int      @default(3)

  // Status
  status      RetryStatus @default(PENDING)
  lastAttempt DateTime?
  nextAttempt DateTime?
  error       String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([scheduledFor])
  @@index([operation])
}

// Call Routing Decisions
model CallRouting {
  id String @id @default(cuid())

  // Call details
  callId      String @unique
  phoneNumber String

  // Routing decision
  agentId      String
  practiceArea String
  language     String
  priority     Int
  urgency      String // low, medium, high, emergency

  // Routing metadata
  routingReason String?
  metadata      Json    @default("{}")

  // Timestamps
  createdAt DateTime @default(now())

  @@index([callId])
  @@index([agentId])
  @@index([practiceArea])
  @@index([urgency])
  @@index([createdAt])
}

// Call Status History
model CallStatusHistory {
  id String @id @default(cuid())

  // Call details
  callId         String
  previousStatus String
  newStatus      String
  
  // Timestamps
  timestamp DateTime @default(now())
  
  // Additional data
  metadata Json @default("{}")

  @@index([callId])
  @@index([timestamp])
}

// Lead Validation Model
model LeadValidation {
  id                 String   @id @default(cuid())
  email              String
  score              Int
  tier               String // hot, warm, cold, invalid
  priorityLevel      String // urgent, high, medium, low
  practiceAreas      String[]
  languagePreference String // en, es, bilingual
  estimatedCaseValue Float?
  factors            Json // urgency, caseValue, readiness, contactQuality scores
  recommendations    String[]
  followUpStrategy   String
  source             String
  validatedAt        DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([email])
  @@index([tier])
  @@index([priorityLevel])
  @@index([validatedAt])
}

// Follow Up Sequence Model
model FollowUpSequence {
  id               String    @id @default(cuid())
  contactId        String
  sequenceType     String // hot_lead, warm_lead, cold_lead, etc
  steps            Json // Array of follow-up steps
  personalizations Json // Dynamic content replacements
  status           String // active, paused, completed, cancelled
  currentStep      Int       @default(0)
  completedSteps   Int       @default(0)
  lastExecutedAt   DateTime?
  nextStepAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([contactId])
  @@index([status])
  @@index([nextStepAt])
}

// Agent Execution Log Model
model AgentExecutionLog {
  id            String   @id @default(cuid())
  agentName     String
  executionType String
  input         Json
  output        Json
  duration      Int // milliseconds
  success       Boolean
  error         String?
  metadata      Json?
  impactScore   Int?     // Optional impact score for tracking
  createdAt     DateTime @default(now())

  @@index([agentName])
  @@index([createdAt])
}

// Content Factory Models

// Dynamic Landing Pages
model LandingPage {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  metaDescription String
  metaKeywords    String[]
  city            String
  state           String
  practiceArea    String
  language        String
  heroImage       String?
  sections        Json // Array of page sections
  localSchema     Json? // Local business schema
  status          String   @default("draft") // draft, published, archived
  publishedAt     DateTime?
  viewCount       Int      @default(0)
  conversionRate  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@index([city, practiceArea, language])
  @@index([status, publishedAt])
}

// Landing Page A/B Test Variations
model LandingPageVariation {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  practiceArea       String
  variationType      String // emotional, statistical, testimonial, faq-focused
  content            String   @db.Text
  conversionElements Json // CTAs and conversion tracking elements
  language           String
  status             String   @default("testing") // testing, winner, archived
  trafficPercentage  Int      @default(50)
  views              Int      @default(0)
  conversions        Int      @default(0)
  conversionRate     Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([practiceArea, variationType])
  @@index([status])
}

// Content Schedule Management
model ContentSchedule {
  id           String    @id @default(cuid())
  contentId    String
  contentType  String // BlogPost, LandingPage, etc.
  scheduledFor DateTime
  platforms    String[] // website, facebook, twitter, linkedin, medium
  status       String    @default("scheduled") // scheduled, published, failed
  publishedAt  DateTime?
  error        String?
  metadata     Json      @default("{}")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([contentId, contentType])
  @@index([scheduledFor, status])
  @@index([platforms])
}

// Content Syndication Tracking
model ContentSyndication {
  id           String   @id @default(cuid())
  contentId    String
  platform     String // medium, linkedin, legal-directories, etc.
  status       String // success, failed
  url          String? // External URL where content was syndicated
  externalId   String? // External platform ID
  metrics      Json    @default("{}") // Platform-specific metrics
  syndicatedAt DateTime
  createdAt    DateTime @default(now())

  @@index([contentId])
  @@index([platform, status])
  @@index([syndicatedAt])
}

// Schema Markup Storage
model SchemaMarkup {
  id          String   @id @default(cuid())
  contentId   String
  contentType String // BlogPost, LandingPage, Attorney, etc.
  schemaType  String // BlogPosting, LegalService, FAQPage, etc.
  schema      Json // The actual schema markup
  performance SchemaPerformance?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([contentId, schemaType])
  @@index([contentType])
  @@index([schemaType])
}

// Schema Performance Tracking
model SchemaPerformance {
  id                  String       @id @default(cuid())
  schemaMarkupId      String       @unique
  schemaMarkup        SchemaMarkup @relation(fields: [schemaMarkupId], references: [id])
  hasRichSnippet      Boolean      @default(false)
  snippetType         String? // featured, FAQ, HowTo, etc.
  firstSeenInSnippet  DateTime?
  averagePosition     Float?
  clickThroughRate    Float?
  impressions         Int          @default(0)
  clicks              Int          @default(0)
  lastChecked         DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([hasRichSnippet])
  @@index([snippetType])
}

// Content Performance Analytics
model ContentPerformance {
  id               String   @id @default(cuid())
  contentId        String
  contentType      String
  publishedAt      DateTime
  platform         String   @default("website")
  viewsFirstHour   Int      @default(0)
  viewsFirstDay    Int      @default(0)
  viewsFirstWeek   Int      @default(0)
  totalViews       Int      @default(0)
  engagementRate   Float    @default(0)
  bounceRate       Float?
  avgTimeOnPage    Float? // seconds
  conversionCount  Int      @default(0)
  conversionRate   Float    @default(0)
  socialShares     Int      @default(0)
  backlinks        Int      @default(0)
  organicTraffic   Int      @default(0)
  searchPosition   Float? // Average SERP position
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([contentId, contentType, platform])
  @@index([publishedAt])
  @@index([platform])
}

// Content Insights Storage
model ContentInsights {
  id                 String   @id @default(cuid())
  date               DateTime
  insights           Json // Top topics, keywords, optimal times, etc.
  performanceMetrics Json // Aggregate performance data
  createdAt          DateTime @default(now())

  @@index([date])
}

// Content Publication Log
model ContentPublicationLog {
  id           String   @id @default(cuid())
  contentId    String
  contentType  String
  platforms    String[]
  scheduledFor DateTime
  publishedAt  DateTime
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  @@index([contentId, contentType])
  @@index([publishedAt])
}

// Image Storage Models
model Image {
  id           String        @id @default(cuid())
  filename     String
  alt          String
  category     ImageCategory
  data         String        @db.Text // Base64 encoded image data
  mimeType     String        // image/jpeg, image/png, etc.
  size         Int           // File size in bytes
  width        Int?
  height       Int?
  
  // Relationships
  entityType   String?       // attorney, office, staff, scholarship, brand
  entityId     String?       // ID of the related entity
  
  // Optimization
  thumbnail    String?       @db.Text // Base64 thumbnail for lists
  cdnUrl       String?       // Future CDN URL if we move to CDN
  
  // Metadata
  metadata     Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@unique([category, filename])
  @@index([category])
  @@index([entityType, entityId])
}

enum ImageCategory {
  ATTORNEY
  OFFICE
  STAFF
  SCHOLARSHIP
  BRAND
  BANNER
  ICON
  OTHER
}

// A/B Testing Models
model ABTest {
  id               String   @id @default(cuid())
  name             String
  description      String?
  status           ABTestStatus
  targetingRules   Json     @default("{}")
  metrics          Json     @default("{}")
  startDate        DateTime
  endDate          DateTime?
  minSampleSize    Int      @default(1000)
  maxDuration      Int      @default(30) // days
  settings         Json     @default("{}")
  
  // Relations
  variants         ABTestVariant[]
  participants     ABTestParticipant[]
  events           ABTestEvent[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([status])
  @@index([startDate, endDate])
}

model ABTestVariant {
  id               String   @id @default(cuid())
  testId           String
  test             ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  name             String
  weight           Float    // Percentage weight for assignment
  content          Json     @default("{}")
  metadata         Json     @default("{}")
  
  // Relations
  participants     ABTestParticipant[]
  events           ABTestEvent[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([testId])
}

model ABTestParticipant {
  id               String        @id @default(cuid())
  userId           String
  sessionId        String
  testId           String
  test             ABTest        @relation(fields: [testId], references: [id], onDelete: Cascade)
  variantId        String
  variant          ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  assignedAt       DateTime      @default(now())
  userAgent        String?
  ipAddress        String?
  geoLocation      String?
  deviceType       String?
  
  @@unique([userId, testId])
  @@index([testId])
  @@index([variantId])
  @@index([assignedAt])
}

model ABTestEvent {
  id               String        @id @default(cuid())
  testId           String
  test             ABTest        @relation(fields: [testId], references: [id], onDelete: Cascade)
  variantId        String
  variant          ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  userId           String
  sessionId        String
  event            String
  value            Float?
  metadata         Json          @default("{}")
  timestamp        DateTime      @default(now())
  
  @@index([testId])
  @@index([variantId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model GMBPost {
  id               String   @id @default(cuid())
  locationId       String
  type             String
  title            String
  content          String   @db.Text
  media            Json     @default("[]")
  callToAction     Json     @default("{}")
  event            Json     @default("{}")
  offer            Json     @default("{}")
  publishedAt      DateTime @default(now())
  
  @@index([locationId])
  @@index([type])
  @@index([publishedAt])
}

enum ABTestStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  ACH
  CASH
  CHECK
  OTHER
}
